<script lang="ts">
  import { onMount } from "svelte"
  import  ioClient  from 'socket.io-client';
  import axios  from "axios";
  import Game from "./Game.svelte";
  import type { GameState } from "./Class";

  class Match { 
    player1: string;
    player2: string;
  }

  let gameList: Match[] = [];

  let update_child: (state: GameState) => void;
  let loop_child: () => void;

  let inGame: boolean = false;
  let gameRequest: boolean = false;
  let watch = false;

  const socket = ioClient('http://localhost:3000', {
    path: '/pong',
    withCredentials: true
    });

  onMount(() => {
    socket.on('newPlayer', () => {
      console.log("new player connected");
    });
    
    socket.on('watchGame', () => {
      watch = true;
      console.log('watcherMode on');
    });

    socket.on('win', () => {
      alert('you win! refresh page to play another game');
    });
    
    socket.on('lose', () => {
      alert('you lose! refresh page to play another game');
    });

    socket.on('opponentLeft', () => {
      if (watch)
        alert('A player has left the game. Refresh page to watch another game');
      else
        alert('your opponent has left the game, you win! refresh page to play another game');
    });

    socket.on('gameState', (state) => {
      if (!inGame) {
        update(state);
        loop();
      }
      inGame = true;
      gameRequest = false;
      if (state.stop)
        inGame = false
    });
  });

  function update(state: GameState) {
    update_child(state);
  }

  function loop() {
    loop_child();
  }

  getGames();
  console.log('gameList', gameList);

  async function getGames() {
    let games = (await axios.get('http://localhost:3000/pong', {withCredentials: true})).data;
    for (const game of games) {
      gameList.push(game);
    }
    gameList = gameList;
  }
  

  function handleKeyup(e: KeyboardEvent) {
    if (stop) 
      return ;
    if (e.key === 'w' || e.key === 's'
      || e.key === 'ArrowUp' || e.key === 'ArrowDown')
      e.preventDefault()

    socket.emit('control', { press: false, key: e.key });
  }

  function handleKeydown(e: KeyboardEvent) {
    if (stop) 
      return ;
    if (e.key === 'w' || e.key === 's'
      || e.key === 'ArrowUp' || e.key === 'ArrowDown')
      e.preventDefault()

    socket.emit('control', { press: true, key: e.key });
  }
  

  function requestGame() {
    socket.emit('requestGame', {});
    gameRequest = true;
  }

  function joinFriendly(event: any) {
    const formData = new FormData(event.target);

    for (let field of formData) {
      const [key, value] = field;
      if (key === 'friend' && value) {
        socket.emit('requestGame', { friend: value });
      }
    }
  }

  function watchGame(game: string) {
    socket.emit('watchGame', {gameName: game});
  }

</script>

<svelte:body on:keydown={handleKeydown} on:keyup={handleKeyup} />

{#if !inGame}

{#if gameList}
  <ul>
    {#each gameList as game}
      <li>{game.player1 + ' vs ' + game.player2} game</li>
      <button on:click={() => watchGame(game.player1)}>watch</button>
    {/each}
  </ul>
{/if}


  {#if !gameRequest}
  <button on:click={requestGame}>request random game</button>
  <form on:submit|preventDefault={(event) => joinFriendly(event)}>
      <input id="friend" name="friend" type="text" placeholder="type friend username">
      <button type="submit">play a friendly match</button>
  </form>
  {/if}
{/if}

{#if inGame}
<Game bind:update_state={update_child} bind:game_loop={loop_child} />

{/if}

{#if gameRequest}
<h2>Game requested !</h2>
{/if}
